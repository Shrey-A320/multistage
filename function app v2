trigger:
  - master

parameters:
  - name: deployOffOfBranch
    type: boolean
    default: false
  - name: provisionResources
    type: boolean
    default: false

pool:
  vmImage: 'windows-latest'

variables:
  - group: OgpUrls
  - group: Azure
  - name: storageName
    value: 'notification'
  - name: appName
    value: 'intnotificationservice'      
  - name:  artifactName
    value: 'Notification'
  - group: OgpUrls
  - name: functionProject
    value: 'MWP.Notification.FunctionApp/MWP.Notification.FunctionApp.csproj'
  - name: buildConfiguration
    value: 'Release'
  - name: deploymentMethod
    value: 'auto'    

resources:
  repositories:
    - repository: templates
      type: git
      name: 'Global Apps/VsTsExtensions'
    - repository: bicep
      type: git
      name: 'BicepBuild/BicepBuild'    


stages:
  - stage: BuildAndPublish
    jobs:   
      - template: BuildTemplates/web-build-dotnetcore.jobs.yml@templates
        parameters:
          buildConfiguration: 'Release'
          publishProjects:
            - name: $(artifactName)
              path: 'MWP.Notification.FunctionApp/MWP.Notification.FunctionApp.csproj'
          preBuildSteps:
            - task: SonarQubePrepare@6
              inputs:
                SonarQube: 'SonarQube Connection'
                scannerMode: 'MSBuild'
                projectKey: 'MWPINT-Notification'
                projectName: 'MWPINT-Notification'
                extraProperties: |
                  sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml
                  sonar.exclusions=**/Tests/**/*
            - task: UseDotNet@2
              displayName: 'install net8'
              inputs:
                version: 8.x
            - task: Bash@3
              displayName: 'Install azurite'
              inputs:
                  targetType: inline
                  script: | 
                            npm install -g azurite; 
            - task: Bash@3
              displayName: 'Run azurite for unit tests'
              inputs:
                  targetType: inline
                  script: | 
                            azurite --silent &                       
    
          postTestRunSteps:
            - task: SonarQubeAnalyze@6
            - task: SonarQubePublish@6
              inputs:
                pollingTimeoutSec: '300'    

################################### QA Stage #############################################
  - stage: ProvFunctionAppQa
    dependsOn: 
    - BuildAndPublish
    condition: |
        and(
          succeeded(),
          eq('${{parameters.provisionResources}}', true)
        )
    displayName: "Provision resources in Qa"
    jobs:
        - template: morningstar-provision-microservice.yml@bicep
          parameters:
            sharedResourceGroupName: '${{variables.appName}}'
            specifiedAppServicePlan: '${{variables.appName}}'       
            env: 'qa'
            azureServiceConnection: 'mwpts-nonprod'
            bicepRepo: bicep
            useStorage: true
            storageName: '$(storageName)'
            technicalserviceid: 'ts01728'
            useFunctions: true
            appName: '${{variables.appName}}'
            enableBlueGreenDeploymentSupport: false
            isManagedIdentity: true
            keyVaultShortName: 'intnotisvc'
            workspaceName: 'log-mwptsnonprod-qa-neu'
            workspaceResourceGroup: 'rg-log-qa'                     


        - template: provision-cosmos.yml
          parameters:
            resourceGroupName: 'rg-iwpt-intnotificationservice-qa'
            dbName: 'intnotificationservice'
            env: 'qa'
            azureServiceConnection: 'mwpts-nonprod'            
            vnet: 'vnet-neu-mwpts-nonprod'
            subNet: 'webapp-subnet'
            vnetResourceGroup: 'rg-neu-mwpts-nonprod-fnd'
            azureVnetResourceGroup: 'rg-neu-mwpts-nonprod-fnd'
            azureVnetSubscriptionId: '71405d8b-34f2-4fa1-bf90-da2ecb0fb009'
                   

        - template: configure-cosmos-settings.yml
          parameters:
            resourceGroup: 'rg-iwpt-intnotificationservice-qa'
            dbName: 'cosmos-intnotificationservice-qa'
            appName: '$(appName)'
            functionName: 'func-intnotificationservice-qa-ne'
            azureServiceConnection: 'mwpts-nonprod'
            dependsOn: 
             - intnotificationservice_cosmos_infrastructure    
            
  - stage: DeployAzureResourcesToQA
    dependsOn: 
      - BuildAndPublish
      - ProvFunctionAppQa  
    jobs:
    - deployment:
      displayName: 'Deploy functions to QA'
      environment: 'Qa'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureFunctionApp@1
              displayName: 'Deploy Functions'             
              inputs:
                appType: 'functionApp'
                appName: 'func-${{variables.appName}}-qa-ne'
                package: '$(Pipeline.Workspace)/${{variables.artifactName}}/*.zip'
                deploymentMethod: ${{variables.deploymentMethod}}         
                azureSubscription: 'mwpts-nonprod'
                  
            - task: AzureCLI@2
              displayName: 'Set function settings'
              inputs:
                jsonConfigFiles: 'local.settings.json'
                azureSubscription: 'mwpts-nonprod'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az functionapp function keys set -n func-'${{variables.appName}}'-qa-ne -g rg-iwpt-${{variables.appName}}-qa --function-name ProcessManifestHttp
                  az functionapp config appsettings set -n func-'${{variables.appName}}'-qa-ne -g rg-iwpt-${{variables.appName}}-qa 
                  az functionapp config appsettings set -n func-'${{variables.appName}}'-qa-ne -g rg-iwpt-${{variables.appName}}-qa 
                  az functionapp config appsettings set -n func-'${{variables.appName}}'-qa-ne -g rg-iwpt-${{variables.appName}}-qa 
                  az functionapp restart -n func-'${{variables.appName}}'-qa-ne -g rg-iwpt-${{variables.appName}}-qa
